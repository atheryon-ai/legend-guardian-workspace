stages:
  - lint
  - test
  - build
  - publish
  - deploy

variables:
  PYTHON_VERSION: "3.11"
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  REGISTRY: "${CI_REGISTRY}"
  IMAGE_NAME: "${CI_REGISTRY_IMAGE}/legend-guardian"
  CACHE_KEY: "${CI_COMMIT_REF_SLUG}-python"

# Cache configuration
cache:
  key: "$CACHE_KEY"
  paths:
    - .cache/pip
    - venv/

# Before script for Python jobs
.python_setup:
  before_script:
    - python -m venv venv
    - source venv/bin/activate
    - pip install --upgrade pip
    - pip install --cache-dir .cache/pip -r requirements.txt

# Lint stage
lint:python:
  stage: lint
  image: python:${PYTHON_VERSION}-slim
  extends: .python_setup
  script:
    - black --check src/ tests/
    - isort --check-only src/ tests/
    - ruff check src/ tests/
    - bandit -r src/ -ll
  only:
    - branches
    - merge_requests
  tags:
    - docker

lint:yaml:
  stage: lint
  image: alpine:latest
  before_script:
    - apk add --no-cache yamllint
  script:
    - yamllint deploy/
  only:
    - branches
    - merge_requests
  tags:
    - docker

# Test stage
test:unit:
  stage: test
  image: python:${PYTHON_VERSION}-slim
  extends: .python_setup
  script:
    - pytest tests/ -v --cov=src --cov-report=term-missing --cov-report=xml --junitxml=junit.xml
  coverage: '/TOTAL.*\s+(\d+%)$/'
  artifacts:
    reports:
      junit: junit.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - htmlcov/
    expire_in: 1 week
  only:
    - branches
    - merge_requests
  tags:
    - docker

test:integration:
  stage: test
  image: python:${PYTHON_VERSION}-slim
  extends: .python_setup
  services:
    - name: mongo:6
      alias: mongodb
    - name: postgres:15
      alias: postgres
  variables:
    MONGODB_URL: "mongodb://mongodb:27017"
    DATABASE_URL: "postgresql://legend:legend@postgres:5432/legend"
    POSTGRES_USER: legend
    POSTGRES_PASSWORD: legend
    POSTGRES_DB: legend
  script:
    - pytest tests/ -v -m integration
  only:
    - branches
    - merge_requests
  tags:
    - docker

# Build stage
build:docker:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t ${IMAGE_NAME}:${CI_COMMIT_SHA} .
    - docker tag ${IMAGE_NAME}:${CI_COMMIT_SHA} ${IMAGE_NAME}:${CI_COMMIT_REF_SLUG}
    - |
      if [ "$CI_COMMIT_BRANCH" = "main" ]; then
        docker tag ${IMAGE_NAME}:${CI_COMMIT_SHA} ${IMAGE_NAME}:latest
      fi
  only:
    - branches
    - tags
  tags:
    - docker

# Publish stage
publish:docker:
  stage: publish
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker push ${IMAGE_NAME}:${CI_COMMIT_SHA}
    - docker push ${IMAGE_NAME}:${CI_COMMIT_REF_SLUG}
    - |
      if [ "$CI_COMMIT_BRANCH" = "main" ]; then
        docker push ${IMAGE_NAME}:latest
      fi
  only:
    - branches
    - tags
  tags:
    - docker

publish:acr:
  stage: publish
  image: mcr.microsoft.com/azure-cli:latest
  script:
    - az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID
    - az acr login --name $ACR_NAME
    - docker pull ${IMAGE_NAME}:${CI_COMMIT_SHA}
    - docker tag ${IMAGE_NAME}:${CI_COMMIT_SHA} ${ACR_NAME}.azurecr.io/legend-guardian:${CI_COMMIT_SHA}
    - docker push ${ACR_NAME}.azurecr.io/legend-guardian:${CI_COMMIT_SHA}
  only:
    - main
    - tags
  when: manual
  tags:
    - docker

# Deploy stage
deploy:dev:
  stage: deploy
  image: bitnami/kubectl:latest
  script:
    - kubectl config use-context ${K8S_CONTEXT_DEV}
    - export REGISTRY=${ACR_NAME}.azurecr.io
    - envsubst < deploy/k8s/agent-deployment.yaml | kubectl apply -n legend-guardian-dev -f -
    - kubectl rollout status deployment/legend-guardian-agent -n legend-guardian-dev
  environment:
    name: development
    url: https://legend-guardian-dev.example.com
  only:
    - develop
  tags:
    - kubernetes

deploy:staging:
  stage: deploy
  image: bitnami/kubectl:latest
  script:
    - kubectl config use-context ${K8S_CONTEXT_STAGING}
    - export REGISTRY=${ACR_NAME}.azurecr.io
    - envsubst < deploy/k8s/agent-deployment.yaml | kubectl apply -n legend-guardian-staging -f -
    - kubectl rollout status deployment/legend-guardian-agent -n legend-guardian-staging
  environment:
    name: staging
    url: https://legend-guardian-staging.example.com
  only:
    - main
  when: manual
  tags:
    - kubernetes

deploy:production:
  stage: deploy
  image: bitnami/kubectl:latest
  script:
    - kubectl config use-context ${K8S_CONTEXT_PROD}
    - export REGISTRY=${ACR_NAME}.azurecr.io
    - |
      # Blue-green deployment
      kubectl apply -n legend-guardian -f deploy/k8s/agent-deployment.yaml \
        --dry-run=client -o yaml | \
        sed 's/legend-guardian-agent/legend-guardian-agent-green/g' | \
        kubectl apply -n legend-guardian -f -
    - kubectl rollout status deployment/legend-guardian-agent-green -n legend-guardian
    - |
      # Switch traffic to green
      kubectl patch service legend-guardian-agent -n legend-guardian \
        -p '{"spec":{"selector":{"app":"legend-guardian-agent-green"}}}'
    - sleep 30
    - |
      # Remove blue deployment
      kubectl delete deployment legend-guardian-agent -n legend-guardian --ignore-not-found
    - |
      # Rename green to blue for next deployment
      kubectl patch deployment legend-guardian-agent-green -n legend-guardian \
        -p '{"metadata":{"name":"legend-guardian-agent"}}'
  environment:
    name: production
    url: https://legend-guardian.example.com
  only:
    - tags
  when: manual
  tags:
    - kubernetes

# Security scanning
security:scan:
  stage: test
  image: aquasec/trivy:latest
  script:
    - trivy image --severity HIGH,CRITICAL ${IMAGE_NAME}:${CI_COMMIT_SHA}
  allow_failure: true
  only:
    - branches
    - merge_requests
  tags:
    - docker

# Performance testing
performance:test:
  stage: test
  image: grafana/k6:latest
  script:
    - k6 run tests/performance/load_test.js
  artifacts:
    paths:
      - performance_results.json
    expire_in: 1 week
  only:
    - main
  when: manual
  tags:
    - docker