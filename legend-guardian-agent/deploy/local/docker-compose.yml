version: '3.8'

services:
  # MongoDB for Legend services
  mongodb:
    image: mongo:6
    container_name: legend-mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin
      MONGO_INITDB_DATABASE: legend
    volumes:
      - mongodb_data:/data/db
    networks:
      - legend-network
    profiles:
      - default
      - full

  # PostgreSQL for additional storage
  postgres:
    image: postgres:15
    container_name: legend-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: legend
      POSTGRES_PASSWORD: legend
      POSTGRES_DB: legend
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - legend-network
    profiles:
      - default
      - full

  # Legend Engine
  engine:
    image: finos/legend-engine-server:latest
    container_name: legend-engine
    ports:
      - "6300:6300"
    environment:
      LEGEND_ENGINE_CONFIG: /config/engine-config.json
    volumes:
      - ./config/engine-config.json:/config/engine-config.json:ro
    depends_on:
      - mongodb
    networks:
      - legend-network
    profiles:
      - default
      - full

  # Legend SDLC
  sdlc:
    image: finos/legend-sdlc-server:latest
    container_name: legend-sdlc
    ports:
      - "6100:6100"
    environment:
      LEGEND_SDLC_CONFIG: /config/sdlc-config.json
    volumes:
      - ./config/sdlc-config.json:/config/sdlc-config.json:ro
    depends_on:
      - mongodb
    networks:
      - legend-network
    profiles:
      - default
      - full

  # Legend Studio
  studio:
    image: finos/legend-studio:latest
    container_name: legend-studio
    ports:
      - "9000:9000"
    environment:
      LEGEND_STUDIO_CONFIG: /config/studio-config.json
    volumes:
      - ./config/studio-config.json:/config/studio-config.json:ro
    depends_on:
      - engine
      - sdlc
    networks:
      - legend-network
    profiles:
      - default
      - full

  # Legend Depot
  depot:
    image: finos/legend-depot-server:latest
    container_name: legend-depot
    ports:
      - "6200:6200"
    environment:
      LEGEND_DEPOT_CONFIG: /config/depot-config.json
    volumes:
      - ./config/depot-config.json:/config/depot-config.json:ro
    depends_on:
      - postgres
    networks:
      - legend-network
    profiles:
      - default
      - full

  # Legend Guardian Agent
  agent:
    build:
      context: ../..
      dockerfile: Dockerfile
    container_name: legend-guardian-agent
    ports:
      - "8000:8000"
    environment:
      - ENGINE_URL=http://engine:6300
      - SDLC_URL=http://sdlc:6100
      - DEPOT_URL=http://depot:6200
      - STUDIO_URL=http://studio:9000
      - DATABASE_URL=postgresql://legend:legend@postgres:5432/legend
      - MONGODB_URL=mongodb://admin:admin@mongodb:27017
      - API_KEY=${API_KEY:-demo-key}
      - PROJECT_ID=${PROJECT_ID:-demo-project}
      - WORKSPACE_ID=${WORKSPACE_ID:-terry-dev}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - OTEL_ENABLED=${OTEL_ENABLED:-false}
    env_file:
      - .env
    depends_on:
      - engine
      - sdlc
      - depot
      - postgres
    networks:
      - legend-network
    profiles:
      - full
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Optional: OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector:latest
    container_name: legend-otel-collector
    ports:
      - "4317:4317"  # gRPC
      - "4318:4318"  # HTTP
      - "8888:8888"  # Prometheus metrics
    volumes:
      - ./config/otel-collector-config.yaml:/etc/otel-collector-config.yaml:ro
    command: ["--config=/etc/otel-collector-config.yaml"]
    networks:
      - legend-network
    profiles:
      - observability

  # Optional: Jaeger for tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: legend-jaeger
    ports:
      - "16686:16686"  # UI
      - "14268:14268"  # HTTP collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - legend-network
    profiles:
      - observability

  # Optional: Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: legend-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
    networks:
      - legend-network
    profiles:
      - observability

  # Optional: Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: legend-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana-dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
    depends_on:
      - prometheus
    networks:
      - legend-network
    profiles:
      - observability

networks:
  legend-network:
    driver: bridge

volumes:
  mongodb_data:
  postgres_data:
  prometheus_data:
  grafana_data: