apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb
  namespace: ${K8S_NAMESPACE}
  labels:
    app: mongodb
    component: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
        component: database
    spec:
      containers:
      - name: mongodb
        image: mongo:6.0
        ports:
        - containerPort: ${MONGODB_PORT}
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          value: "${MONGODB_USER}"
        - name: MONGO_INITDB_ROOT_PASSWORD
          value: "${MONGODB_PASSWORD}"
        - name: MONGO_INITDB_DATABASE
          value: "${MONGODB_NAME}"
        volumeMounts:
        - name: mongodb-data
          mountPath: /data/db
        - name: mongodb-init
          mountPath: /docker-entrypoint-initdb.d
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          tcpSocket:
            port: ${MONGODB_PORT}
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          tcpSocket:
            port: ${MONGODB_PORT}
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: mongodb-data
        persistentVolumeClaim:
          claimName: mongodb-pvc
      - name: mongodb-init
        configMap:
          name: mongodb-init
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb
  namespace: ${K8S_NAMESPACE}
  labels:
    app: mongodb
spec:
  type: ClusterIP
  ports:
  - port: ${MONGODB_PORT}
    targetPort: ${MONGODB_PORT}
    protocol: TCP
    name: mongodb
  selector:
    app: mongodb
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongodb-pvc
  namespace: ${K8S_NAMESPACE}
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-init
  namespace: ${K8S_NAMESPACE}
data:
  init.js: |
    db = db.getSiblingDB('${MONGODB_NAME}');
    db.createUser({
      user: '${MONGODB_USER}',
      pwd: '${MONGODB_PASSWORD}',
      roles: [
        { role: 'readWrite', db: '${MONGODB_NAME}' },
        { role: 'dbAdmin', db: '${MONGODB_NAME}' }
      ]
    });
